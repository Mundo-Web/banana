// ==========================================
// C√ìDIGO PARA AGREGAR PDF R√ÅPIDO AL EDITOR
// ==========================================

// 1. IMPORT (ya agregado):
import { Zap } from "lucide-react";

// 2. FUNCI√ìN PARA GENERAR PDF R√ÅPIDO (agregar despu√©s de la funci√≥n handleExportPDF):

// üöÄ Funci√≥n para generar PDF r√°pido usando thumbnails del backend
const handleExportPDFFromBackendThumbnails = async () => {
    if (!projectData?.id) {
        toast.error('No se ha cargado ning√∫n proyecto.');
        return;
    }

    // Evitar m√∫ltiples ejecuciones simult√°neas
    if (isPDFGenerating) {
        toast.warning('‚è≥ Ya se est√° generando un PDF. Por favor espera...');
        return;
    }

    // Activar estado de loading
    setIsPDFGenerating(true);

    const loadingToast = toast.loading('‚ö° Generando PDF r√°pido con thumbnails de alta calidad...', {
        duration: 0
    });

    try {
        console.log('‚ö° [PDF-THUMBNAILS] Iniciando generaci√≥n de PDF con thumbnails del backend...');

        // Paso 1: Generar thumbnails en el backend
        const thumbnailResponse = await fetch(`/api/thumbnails/${projectData.id}/generate`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.content || '',
            },
            body: JSON.stringify({
                pages: pages.map(page => ({
                    id: page.id,
                    type: page.type,
                    cells: page.cells,
                    layout: page.layout,
                    backgroundColor: page.backgroundColor,
                    backgroundImage: page.backgroundImage
                })),
                workspaceDimensions: workspaceDimensions,
                quality: 300 // DPI
            })
        });

        if (!thumbnailResponse.ok) {
            throw new Error('Error al generar thumbnails en el backend');
        }

        const thumbnailData = await thumbnailResponse.json();
        console.log('‚úÖ [PDF-THUMBNAILS] Thumbnails generados:', thumbnailData);

        // Paso 2: Crear PDF usando jsPDF con los thumbnails
        const { jsPDF } = window.jspdf;
        const pdf = new jsPDF({
            orientation: workspaceDimensions.width > workspaceDimensions.height ? 'landscape' : 'portrait',
            unit: 'px',
            format: [workspaceDimensions.width, workspaceDimensions.height]
        });

        // Procesar cada p√°gina
        for (let i = 0; i < pages.length; i++) {
            const page = pages[i];
            const thumbnailUrl = thumbnailData.thumbnails[page.id];

            if (thumbnailUrl) {
                // Cargar imagen thumbnail
                const img = new Image();
                await new Promise((resolve, reject) => {
                    img.onload = resolve;
                    img.onerror = reject;
                    img.src = thumbnailUrl;
                });

                // Agregar p√°gina al PDF
                if (i > 0) {
                    pdf.addPage();
                }

                // Agregar imagen a la p√°gina
                pdf.addImage(
                    img,
                    'PNG',
                    0,
                    0,
                    workspaceDimensions.width,
                    workspaceDimensions.height,
                    undefined,
                    'FAST'
                );
            }
        }

        // Guardar PDF
        const fileName = `${projectData.name || 'proyecto'}_thumbnails_${new Date().toISOString().split('T')[0]}.pdf`;
        pdf.save(fileName);

        toast.dismiss(loadingToast);
        toast.success(`‚ö° PDF r√°pido generado exitosamente!\nüìÑ Archivo: ${fileName}\nüñºÔ∏è Usando thumbnails de alta calidad`, {
            duration: 6000
        });

        console.log('‚úÖ [PDF-THUMBNAILS] PDF generado exitosamente:', fileName);

    } catch (error) {
        console.error('‚ùå [PDF-THUMBNAILS] Error:', error);
        toast.dismiss(loadingToast);
        toast.error('‚ùå Error al generar PDF con thumbnails: ' + error.message);
    } finally {
        setIsPDFGenerating(false);
    }
};

// 3. BOT√ìN EN EL HEADER (agregar despu√©s del bot√≥n PDF normal):

<Button
    variant="ghost"
    size="sm"
    tooltip={isPDFGenerating ? "Generando PDF..." : "PDF R√°pido con Thumbnails"}
    onClick={handleExportPDFFromBackendThumbnails}
    disabled={isPDFGenerating}
    className={`text-white hover:bg-white/10 ${isPDFGenerating ? 'opacity-50 cursor-not-allowed' : ''}`}
    icon={isPDFGenerating ? (
        <div className="h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent" />
    ) : (
        <Zap className="h-4 w-4" />
    )}
>
    {isPDFGenerating ? 'Generando...' : 'PDF R√°pido'}
</Button>

// ==========================================
// INSTRUCCIONES DE INSTALACI√ìN:
// ==========================================

1. Ya agregu√© el import de Zap a lucide-react
2. Debes agregar la funci√≥n handleExportPDFFromBackendThumbnails despu√©s de la funci√≥n handleExportPDF
3. Debes agregar el bot√≥n despu√©s del bot√≥n PDF normal en el header
4. El bot√≥n usa el icono Zap (‚ö°) para diferenciarse del bot√≥n PDF normal
5. Genera thumbnails de alta calidad en el backend y luego crea el PDF r√°pidamente

¬°YA EST√Å TODO EL C√ìDIGO LISTO PARA USAR!
